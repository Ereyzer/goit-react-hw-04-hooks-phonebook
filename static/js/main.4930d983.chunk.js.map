{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","service/helpers/filterTest.js","components/Filter/Filter.js","components/App/App.js","redux/initialState.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","contactsAction","createAction","name","number","payload","id","uuidv4","filterAction","deleteActions","connect","state","items","contacts","dispatch","onSubmit","data","clearFilter","inputIdName","useRef","inputIdNumber","useState","newName","setNewName","setNumber","className","style","Form","e","preventDefault","trim","some","toast","error","success","info","htmlFor","current","Label","Input","type","value","onChange","target","AddBtn","Button","variant","color","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","filterItems","filter","test","slice","length","toLowerCase","testFunc","onDeleteElement","map","styles","Item","Text","onClick","inputId","React","App","initialState","createReducer","contact","_","contactsReducer","combineReducers","contactsPersistConfig","key","storage","blackList","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.4930d983.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__2HicR\",\"AddBtn\":\"ContactForm_AddBtn__2xKH-\",\"Item\":\"ContactForm_Item__3OaPX\",\"Label\":\"ContactForm_Label__2AU9F\",\"Input\":\"ContactForm_Input__2rnoM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"ContactList_Button__KTNUk\",\"Item\":\"ContactList_Item__gX1q6\",\"Text\":\"ContactList_Text__179V0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Label\":\"Filter_Label__386LO\",\"Input\":\"Filter_Input__3EdFu\",\"Item\":\"Filter_Item__2hsYa\"};","import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n// import actionTypes from './contactsActoinsTypes';\n\n// export const contactsAction = ({ name, number }) => {\n//   return {\n//     type: actionTypes.ADD_ITEMS,\n//     payload: { id: uuidv4(), name, number },\n//   };\n// };\n\nexport const contactsAction = createAction(\n  'contacts/addContact',\n  ({ name, number }) => ({\n    payload: { id: uuidv4(), name, number },\n  }),\n);\n\n// export const filterAction = value => {\n//   return { type: actionTypes.FILTER_ITEMS, payload: value };\n// };\nexport const filterAction = createAction('contacts/filter');\n\n// export const deleteActions = value => {\n//   return { type: actionTypes.DELETE_ITEMS, payload: value };\n// };\n\nexport const deleteActions = createAction('contacts/deleteContact');\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport style from './ContactForm.module.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Button from '@material-ui/core/Button';\nimport {\n  contactsAction,\n  filterAction,\n} from '../../redux/contacts/contacts-actions';\nimport { connect } from 'react-redux';\n\nfunction ContactForm({ items, onSubmit, clearFilter }) {\n  const inputIdName = useRef(uuidv4());\n  const inputIdNumber = useRef(uuidv4());\n  const [newName, setNewName] = useState('');\n  const [number, setNumber] = useState('');\n  const submitForm = e => {\n    e.preventDefault();\n    if (newName.trim() === '' || number.trim() === '') {\n      toast.info('fill in all fields');\n      return;\n    }\n\n    if (items.some(({ name }) => name === newName)) {\n      toast.error(newName + ' is already exist');\n      return;\n    }\n\n    clearFilter();\n    onSubmit({ name: newName, number });\n\n    toast.success('you have new contact');\n    setNewName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <form className={style.Form} onSubmit={submitForm}>\n        <label htmlFor={inputIdName.current} className={style.Label}>\n          Name\n        </label>\n        <input\n          id={inputIdName.current}\n          className={style.Input}\n          type=\"text\"\n          name=\"name\"\n          value={newName}\n          onChange={e => setNewName(e.target.value)}\n        ></input>\n        <label htmlFor={inputIdNumber.current} className={style.Label}>\n          Number\n        </label>\n        <input\n          id={inputIdNumber.current}\n          className={style.Input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={e => setNumber(e.target.value)}\n        ></input>\n        <div className={style.AddBtn}>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Add contact\n          </Button>\n        </div>\n      </form>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={5000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n      <ToastContainer />\n    </>\n  );\n}\n\nContactForm.propTypes = {\n  items: PropTypes.array.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  clearFilter: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => {\n  return { items: state.contacts.items };\n};\n\nconst onDispatchToProps = dispatch => {\n  return {\n    onSubmit: data => dispatch(contactsAction(data)),\n    clearFilter: () => dispatch(filterAction('')),\n  };\n};\n\nexport default connect(mapStateToProps, onDispatchToProps)(ContactForm);\n","import React from 'react';\nimport styles from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport { deleteActions } from '../../redux/contacts/contacts-actions';\nimport { connect } from 'react-redux';\nimport { testFunc } from '../../service/helpers/filterTest';\nimport { toast } from 'react-toastify';\n\nconst ContactList = ({ contacts, onDeleteElement }) => (\n  <ul>\n    {contacts.map(({ name, number, id }) => (\n      <li key={id}>\n        <div className={styles.Item}>\n          <p className={styles.Text}>\n            {name}: <span>{number}</span>\n          </p>\n          <button\n            type=\"button\"\n            className={styles.Button}\n            onClick={() => onDeleteElement({ id, name })}\n          >\n            Delete\n          </button>\n        </div>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteElement: PropTypes.func.isRequired,\n};\n\nfunction filterItems({ items, filter }) {\n  if (filter === '') return items;\n  return items.filter(({ name }) => testFunc(filter, name));\n}\n\nconst mapStateToProps = ({ contacts }) => {\n  return { contacts: filterItems(contacts) };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onDeleteElement: ({ id, name }) => {\n      toast.info(name + ' is deleted');\n      return dispatch(deleteActions(id));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","export function testFunc(filter, name) {\n  const test = name.slice(0, filter.length);\n  return filter.toLowerCase() === test.toLowerCase();\n}\n","import React from 'react';\nimport styles from './Filter.module.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { filterAction } from '../../redux/contacts/contacts-actions';\nimport { connect } from 'react-redux';\n\nfunction Filter({ filter, onChange }) {\n  const inputId = React.useRef(uuidv4());\n  return (\n    <div className={styles.Item}>\n      <label className={styles.Label} htmlFor={inputId.current}>\n        Find contacts by name\n      </label>\n      <input\n        className={styles.Input}\n        id={inputId.current}\n        value={filter}\n        onChange={onChange}\n      ></input>\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => {\n  return { filter: state.contacts.filter };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onChange: e => dispatch(filterAction(`${e.target.value.trim()}`)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import './App.css';\nimport React from 'react';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={5000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n      <ToastContainer />\n    </div>\n  );\n}\n","export const initialState = {\n  contacts: {\n    items: [],\n    filter: '',\n  },\n};\n","import { combineReducers } from 'redux';\nimport { initialState } from '../initialState';\n// import actionTypes from './contactsActoinsTypes';\n// import { addLocalStorage } from '../../service/helpers/localeStorage';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  contactsAction,\n  deleteActions,\n  filterAction,\n} from './contacts-actions';\n\n// const contactsItemsReducer = (state = initialState.contacts.items, action) => {\n//   switch (action.type) {\n//     case actionTypes.ADD_ITEMS:\n//       const addNewState = [...state, action.payload];\n\n//       addLocalStorage(addNewState);\n//       return addNewState;\n//     case actionTypes.DELETE_ITEMS:\n//       const newState = state.filter(contact => contact.id !== action.payload);\n//       addLocalStorage(newState);\n//       return newState;\n//     default:\n//       return state;\n//   }\n// };\n\nconst items = createReducer(initialState.contacts.items, {\n  [contactsAction]: (state, { payload }) => {\n    const newState = [...state, payload];\n    // addLocalStorage(newState);\n    return newState;\n  },\n  [deleteActions]: (state, { payload }) => {\n    const newState = state.filter(contact => contact.id !== payload);\n    // addLocalStorage(newState);\n    return newState;\n  },\n});\n\n// const filterReducer = (state = initialState.contacts.filter, action) => {\n//   switch (action.type) {\n//     case actionTypes.FILTER_ITEMS:\n//       return action.payload;\n//     default:\n//       return state;\n//   }\n// };\n\nconst filter = createReducer(initialState.contacts.filter, {\n  [filterAction]: (_, { payload }) => payload,\n});\n\nexport const contactsReducer = combineReducers({\n  items,\n  filter,\n});\n","// import { createStore, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport { contactsReducer } from './contacts/contactsReducer';\nimport { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n// import { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nconst contactsPersistConfig = {\n  key: 'List',\n  storage,\n  blackList: ['filter'],\n};\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\nconst middleware = getDefaultMiddleware => {\n  if (process.env.NODE_ENV === `development`) {\n    const { logger } = require(`redux-logger`);\n\n    return [\n      ...getDefaultMiddleware({\n        serializableCheck: {\n          ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n      }),\n      logger,\n    ];\n  } else {\n    return [\n      ...getDefaultMiddleware({\n        serializableCheck: {\n          ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n      }),\n    ];\n  }\n};\n// const store = createStore(rootReducer, composeWithDevTools());\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\nconst persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}